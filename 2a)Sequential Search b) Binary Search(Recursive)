#include <stdio.h>

// Sequential Search
int sequentialSearch(int arr[], int n, int x) {
    for (int i = 0; i < n; i++) {
        if (arr[i] == x) {
            return i; // Element found at index i
        }
    }
    return -1; // Element not found
}

// Recursive Binary Search
int binarySearchRecursive(int arr[], int low, int high, int x) {
    if (low <= high) {
        int mid = low + (high - low) / 2;

        // Check if x is present at mid
        if (arr[mid] == x) {
            return mid;
        }

        // If x is smaller than mid, then it can only be present in left subarray
        if (arr[mid] > x) {
            return binarySearchRecursive(arr, low, mid - 1, x);
        }

        // Else x can only be present in right subarray
        return binarySearchRecursive(arr, mid + 1, high, x);
    }

    // If element is not present in array
    return -1;
}

int main() {
    int n, x;

    // Input size of array
    printf("Enter the size of the array: ");
    scanf("%d", &n);

    int arr[n];

    // Input elements of the array
    printf("Enter %d elements of the array: ", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Input element to search
    printf("Enter the element to search: ");
    scanf("%d", &x);

    // Sequential Search
    int sequentialResult = sequentialSearch(arr, n, x);

    // Binary Search
    int binaryResult = binarySearchRecursive(arr, 0, n - 1, x);

    // Output results
    if (sequentialResult != -1) {
        printf("Element %d found using linear search at index %d\n", x, sequentialResult);
    } else {
        printf("Element %d not found using linear search\n", x);
    }

    if (binaryResult != -1) {
        printf("Element %d found using binary search at index %d\n", x, binaryResult);
    } else {
        printf("Element %d not found using binary search\n", x);
    }

    return 0;
}
